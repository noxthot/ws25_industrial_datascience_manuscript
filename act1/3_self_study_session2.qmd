# Self study - Session 2 {#sec-act1-selfstudy2}
In this session, we will explore the dataset in @sec-act1 further.

When comparing our findings in @sec-act1-1-int-pp and @sec-act1-1-int-dt with the failure description in @sec-act1-1-reveal, we can see that we did a pretty good job in identifying failure reasons.
However, we could have done better for `OSF`.

::: {.callout-caution appearance="simple" collapse="true" icon=false}
:::: {#exr-basics-mv-space}
## Overstrain failure
::::
According to @sec-act1-1-reveal, the failure type _overstrain failure_ (`OSF`) occurs when the machine is subjected to excessive torque when a worn out tool is used.
Also the product variant is associated to the failure rate: When the product of torque and tool wear exceeds 11.000 minNm for the L product variant (12.000 for M, 13.000 for H), the process fails due to overstrain.

Are you able to verify this relationship by visualizations?
:::

Also, there seems that the description of `TWF` in @sec-act1-1-reveal is contradicting our observations.

::: {.callout-caution appearance="simple" collapse="true" icon=false}
:::: {#exr-basics-mv-space}
## Tool wear failure
::::
Identify where the description of `TWF` in @sec-act1-1-reveal does not align with your findings.
:::

So far we have used `seaborn` to visualize the data.
`seaborn` is based on `matplotlib` and provides a high-level interface for drawing statistical graphics.
While `matplotlib` supports interactive figures that can zoom, pan and update (see [here](https://mybinder.org/v2/gh/matplotlib/mpl-brochure-binder/main?labpath=MatplotlibExample.ipynb)), for richer interactive visualizations we can use `plotly`.
`plotly` is open-source and built on top of the Plotly JavaScript library `plotly.js`, thus enables users to create interactive web-based visualizations that can be displayed in `Jupyter` notebooks as well as in standalone HTML files.
Especially for explorative data analysis, `plotly` offers a more user-friendly and flexible approach to create and explore complex visualizations.

::: {.callout-caution appearance="simple" collapse="true" icon=false}
:::: {#exr-basics-mv-space}
## Plotly introduction
::::
Consult the [Plotly documentation](https://plotly.com/python/) for more information on how to use the library.
Start with the notebook from @sec-act1-selfstudy1, recreate the visualizations from @sec-act1 using `plotly` and explore the data interactively.
:::

In @sec-act1-1-machinefailures we used pair plots, boxplots and decision trees to investigate the relationship between different features and the machine failure types.
Another approach could be to use [parallel coordinates plots](https://plotly.com/python/parallel-coordinates-plot/).

::: {.callout-caution appearance="simple" collapse="true" icon=false}
:::: {#exr-basics-mv-space}
## Parallel coordinates plots
::::
Use [parallel coordinates plots](https://plotly.com/python/parallel-coordinates-plot/) to visualize the relationships between multiple features and the machine failure types:
1. Display every available continuous variable along with one selected failure type.
1. Also add `Type` as a categorical variable to the plot.
1. Make the failure type categorical.
1. Color the lines according to the selected failure type.
1. Allow for choosing the failure type interactively using a Dropdown widget (see [Jupyter widgets](https://ipywidgets.readthedocs.io/en/stable/)) with the available failure types.
1. The parallel coordinate plot allows for dragging columns (just click and drag the title of a column) and reordering them.
   It also allows for selecting and highlighting specific lines, making it easier to focus on particular data points.
   Use these two features to get insights into the relationships between different features and the selected failure type.
   Can you identify the patterns which we have exploited in our previous analyses?
:::
